#include <stdio.h>
#include <pthread.h>

pthread_mutex_t mutex;
pthread_cond_t condition;

void *waiter(void *arg) {
    pthread_mutex_lock(&mutex);
    printf("Waiter thread waiting for signal...\n");
    pthread_cond_wait(&condition, &mutex);
    printf("Waiter thread received signal.\n");
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

void *signaler(void *arg) {
    sleep(2); // Let the waiter thread start waiting
    printf("Signaler thread sending signal...\n");
    pthread_mutex_lock(&mutex);
    pthread_cond_signal(&condition);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

int main() {
    pthread_t waiterThread, signalerThread;

    pthread_mutex_init(&mutex, NULL);
    pthread_cond_init(&condition, NULL);

    pthread_create(&waiterThread, NULL, waiter, NULL);
    pthread_create(&signalerThread, NULL, signaler, NULL);

    pthread_join(waiterThread, NULL);
    pthread_join(signalerThread, NULL);

    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&condition);

    return 0;
}
